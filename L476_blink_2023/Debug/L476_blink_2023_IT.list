
L476_blink_2023_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f7c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001104  08001104  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08001104  08001104  00020008  2**0
                  CONTENTS
  4 .ARM          00000000  08001104  08001104  00020008  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001104  08001104  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001104  08001104  00011104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001108  08001108  00011108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000008  20000000  0800110c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  20000008  08001114  00020008  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08001114  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020008  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003830  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a38  00000000  00000000  00023868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000408  00000000  00000000  000242a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a0  00000000  00000000  000246a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e79f  00000000  00000000  00024a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000030a8  00000000  00000000  000431e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000abaed  00000000  00000000  0004628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1d7c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ed8  00000000  00000000  000f1dcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000008 	.word	0x20000008
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080010ec 	.word	0x080010ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000000c 	.word	0x2000000c
 80001c4:	080010ec 	.word	0x080010ec

080001c8 <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <LL_RCC_LSE_Enable+0x20>)
 80001ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80001d2:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <LL_RCC_LSE_Enable+0x20>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000

080001ec <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <LL_RCC_LSE_IsReady+0x24>)
 80001f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d101      	bne.n	8000202 <LL_RCC_LSE_IsReady+0x16>
 80001fe:	2301      	movs	r3, #1
 8000200:	e000      	b.n	8000204 <LL_RCC_LSE_IsReady+0x18>
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000

08000214 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_RCC_LSI_Enable+0x20>)
 800021a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800021e:	4a05      	ldr	r2, [pc, #20]	; (8000234 <LL_RCC_LSI_Enable+0x20>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8000228:	bf00      	nop
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000

08000238 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <LL_RCC_LSI_IsReady+0x24>)
 800023e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000242:	f003 0302 	and.w	r3, r3, #2
 8000246:	2b02      	cmp	r3, #2
 8000248:	d101      	bne.n	800024e <LL_RCC_LSI_IsReady+0x16>
 800024a:	2301      	movs	r3, #1
 800024c:	e000      	b.n	8000250 <LL_RCC_LSI_IsReady+0x18>
 800024e:	2300      	movs	r3, #0
}
 8000250:	4618      	mov	r0, r3
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000

08000260 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000264:	4b05      	ldr	r3, [pc, #20]	; (800027c <LL_RCC_MSI_Enable+0x1c>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a04      	ldr	r2, [pc, #16]	; (800027c <LL_RCC_MSI_Enable+0x1c>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000

08000280 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_MSI_IsReady+0x20>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	f003 0302 	and.w	r3, r3, #2
 800028c:	2b02      	cmp	r3, #2
 800028e:	d101      	bne.n	8000294 <LL_RCC_MSI_IsReady+0x14>
 8000290:	2301      	movs	r3, #1
 8000292:	e000      	b.n	8000296 <LL_RCC_MSI_IsReady+0x16>
 8000294:	2300      	movs	r3, #0
}
 8000296:	4618      	mov	r0, r3
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80002a8:	4b05      	ldr	r3, [pc, #20]	; (80002c0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	4a04      	ldr	r2, [pc, #16]	; (80002c0 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80002ae:	f043 0308 	orr.w	r3, r3, #8
 80002b2:	6013      	str	r3, [r2, #0]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000

080002c4 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <LL_RCC_MSI_SetRange+0x24>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002d4:	4904      	ldr	r1, [pc, #16]	; (80002e8 <LL_RCC_MSI_SetRange+0x24>)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4313      	orrs	r3, r2
 80002da:	600b      	str	r3, [r1, #0]
}
 80002dc:	bf00      	nop
 80002de:	370c      	adds	r7, #12
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000

080002ec <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80002f4:	4b07      	ldr	r3, [pc, #28]	; (8000314 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80002f6:	685b      	ldr	r3, [r3, #4]
 80002f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	021b      	lsls	r3, r3, #8
 8000300:	4904      	ldr	r1, [pc, #16]	; (8000314 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000302:	4313      	orrs	r3, r2
 8000304:	604b      	str	r3, [r1, #4]
}
 8000306:	bf00      	nop
 8000308:	370c      	adds	r7, #12
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000

08000318 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 8000322:	689b      	ldr	r3, [r3, #8]
 8000324:	f023 0203 	bic.w	r2, r3, #3
 8000328:	4904      	ldr	r1, [pc, #16]	; (800033c <LL_RCC_SetSysClkSource+0x24>)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4313      	orrs	r3, r2
 800032e:	608b      	str	r3, [r1, #8]
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000

08000340 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <LL_RCC_GetSysClkSource+0x18>)
 8000346:	689b      	ldr	r3, [r3, #8]
 8000348:	f003 030c 	and.w	r3, r3, #12
}
 800034c:	4618      	mov	r0, r3
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40021000 	.word	0x40021000

0800035c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000364:	4b06      	ldr	r3, [pc, #24]	; (8000380 <LL_RCC_SetAHBPrescaler+0x24>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800036c:	4904      	ldr	r1, [pc, #16]	; (8000380 <LL_RCC_SetAHBPrescaler+0x24>)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4313      	orrs	r3, r2
 8000372:	608b      	str	r3, [r1, #8]
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40021000 	.word	0x40021000

08000384 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	608b      	str	r3, [r1, #8]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40021000 	.word	0x40021000

080003ac <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003b4:	4b06      	ldr	r3, [pc, #24]	; (80003d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003b6:	689b      	ldr	r3, [r3, #8]
 80003b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003bc:	4904      	ldr	r1, [pc, #16]	; (80003d0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	608b      	str	r3, [r1, #8]
}
 80003c4:	bf00      	nop
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	40021000 	.word	0x40021000

080003d4 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <LL_RCC_SetRTCClockSource+0x28>)
 80003de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80003e6:	4905      	ldr	r1, [pc, #20]	; (80003fc <LL_RCC_SetRTCClockSource+0x28>)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4313      	orrs	r3, r2
 80003ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <LL_RCC_EnableRTC+0x20>)
 8000406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800040a:	4a05      	ldr	r2, [pc, #20]	; (8000420 <LL_RCC_EnableRTC+0x20>)
 800040c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000

08000424 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <LL_RCC_ForceBackupDomainReset+0x20>)
 800042a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800042e:	4a05      	ldr	r2, [pc, #20]	; (8000444 <LL_RCC_ForceBackupDomainReset+0x20>)
 8000430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000434:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	40021000 	.word	0x40021000

08000448 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800044c:	4b06      	ldr	r3, [pc, #24]	; (8000468 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 800044e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000452:	4a05      	ldr	r2, [pc, #20]	; (8000468 <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000454:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	40021000 	.word	0x40021000

0800046c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800046c:	b480      	push	{r7}
 800046e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000470:	4b05      	ldr	r3, [pc, #20]	; (8000488 <LL_RCC_PLL_Enable+0x1c>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	4a04      	ldr	r2, [pc, #16]	; (8000488 <LL_RCC_PLL_Enable+0x1c>)
 8000476:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800047a:	6013      	str	r3, [r2, #0]
}
 800047c:	bf00      	nop
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800048c:	b480      	push	{r7}
 800048e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000490:	4b07      	ldr	r3, [pc, #28]	; (80004b0 <LL_RCC_PLL_IsReady+0x24>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000498:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800049c:	d101      	bne.n	80004a2 <LL_RCC_PLL_IsReady+0x16>
 800049e:	2301      	movs	r3, #1
 80004a0:	e000      	b.n	80004a4 <LL_RCC_PLL_IsReady+0x18>
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop
 80004b0:	40021000 	.word	0x40021000

080004b4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
 80004c0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80004c2:	4b0a      	ldr	r3, [pc, #40]	; (80004ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004c4:	68da      	ldr	r2, [r3, #12]
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80004c8:	4013      	ands	r3, r2
 80004ca:	68f9      	ldr	r1, [r7, #12]
 80004cc:	68ba      	ldr	r2, [r7, #8]
 80004ce:	4311      	orrs	r1, r2
 80004d0:	687a      	ldr	r2, [r7, #4]
 80004d2:	0212      	lsls	r2, r2, #8
 80004d4:	4311      	orrs	r1, r2
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	430a      	orrs	r2, r1
 80004da:	4904      	ldr	r1, [pc, #16]	; (80004ec <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80004dc:	4313      	orrs	r3, r2
 80004de:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80004e0:	bf00      	nop
 80004e2:	3714      	adds	r7, #20
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40021000 	.word	0x40021000
 80004f0:	f9ff808c 	.word	0xf9ff808c

080004f4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80004f8:	4b05      	ldr	r3, [pc, #20]	; (8000510 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000502:	60d3      	str	r3, [r2, #12]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40021000 	.word	0x40021000

08000514 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000524:	4904      	ldr	r1, [pc, #16]	; (8000538 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	4313      	orrs	r3, r2
 800052a:	600b      	str	r3, [r1, #0]
}
 800052c:	bf00      	nop
 800052e:	370c      	adds	r7, #12
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40007000 	.word	0x40007000

0800053c <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a04      	ldr	r2, [pc, #16]	; (8000558 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000546:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40007000 	.word	0x40007000

0800055c <LL_RTC_SetAsynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  AsynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7F
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetAsynchPrescaler(RTC_TypeDef *RTCx, uint32_t AsynchPrescaler)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	691b      	ldr	r3, [r3, #16]
 800056a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	431a      	orrs	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	611a      	str	r2, [r3, #16]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr

08000584 <LL_RTC_SetSynchPrescaler>:
  * @param  RTCx RTC Instance
  * @param  SynchPrescaler Value between Min_Data = 0 and Max_Data = 0x7FFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetSynchPrescaler(RTC_TypeDef *RTCx, uint32_t SynchPrescaler)
{
 8000584:	b480      	push	{r7}
 8000586:	b083      	sub	sp, #12
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
 800058c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	691b      	ldr	r3, [r3, #16]
 8000592:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000596:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800059a:	683a      	ldr	r2, [r7, #0]
 800059c:	431a      	orrs	r2, r3
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	611a      	str	r2, [r3, #16]
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_RTC_EnableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	22ff      	movs	r2, #255	; 0xff
 80005ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c6:	4770      	bx	lr

080005c8 <LL_RTC_DisableWriteProtection>:
  * @rmtoll RTC_WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	22ca      	movs	r2, #202	; 0xca
 80005d4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2253      	movs	r2, #83	; 0x53
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <LL_RTC_BAK_SetRegister>:
  *         @arg @ref LL_RTC_BKP_DR31
  * @param  Data Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_RTC_BAK_SetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister, uint32_t Data)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b087      	sub	sp, #28
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	3350      	adds	r3, #80	; 0x50
 80005fc:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	697a      	ldr	r2, [r7, #20]
 8000604:	4413      	add	r3, r2
 8000606:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
}
 800060e:	bf00      	nop
 8000610:	371c      	adds	r7, #28
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
	...

0800061c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <LL_FLASH_SetLatency+0x24>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f023 0207 	bic.w	r2, r3, #7
 800062c:	4904      	ldr	r1, [pc, #16]	; (8000640 <LL_FLASH_SetLatency+0x24>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4313      	orrs	r3, r2
 8000632:	600b      	str	r3, [r1, #0]
}
 8000634:	bf00      	nop
 8000636:	370c      	adds	r7, #12
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr
 8000640:	40022000 	.word	0x40022000

08000644 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000648:	4b04      	ldr	r3, [pc, #16]	; (800065c <LL_FLASH_GetLatency+0x18>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f003 0307 	and.w	r3, r3, #7
}
 8000650:	4618      	mov	r0, r3
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <SystemClock_Config_exp1>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config_exp1(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000664:	2004      	movs	r0, #4
 8000666:	f7ff ffd9 	bl	800061c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800066a:	bf00      	nop
 800066c:	f7ff ffea 	bl	8000644 <LL_FLASH_GetLatency>
 8000670:	4603      	mov	r3, r0
 8000672:	2b04      	cmp	r3, #4
 8000674:	d1fa      	bne.n	800066c <SystemClock_Config_exp1+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f7ff ff4b 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 800067e:	f7ff fdc9 	bl	8000214 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000682:	bf00      	nop
 8000684:	f7ff fdd8 	bl	8000238 <LL_RCC_LSI_IsReady>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d1fa      	bne.n	8000684 <SystemClock_Config_exp1+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 800068e:	f7ff fde7 	bl	8000260 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000692:	bf00      	nop
 8000694:	f7ff fdf4 	bl	8000280 <LL_RCC_MSI_IsReady>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d1fa      	bne.n	8000694 <SystemClock_Config_exp1+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800069e:	f7ff fe01 	bl	80002a4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 80006a2:	2060      	movs	r0, #96	; 0x60
 80006a4:	f7ff fe0e 	bl	80002c4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff fe1f 	bl	80002ec <LL_RCC_MSI_SetCalibTrimming>
//  LL_PWR_EnableBkUpAccess();
//  LL_RCC_ForceBackupDomainReset();
//  LL_RCC_ReleaseBackupDomainReset();
//  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
//  LL_RCC_EnableRTC();
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80006ae:	2300      	movs	r3, #0
 80006b0:	2228      	movs	r2, #40	; 0x28
 80006b2:	2100      	movs	r1, #0
 80006b4:	2001      	movs	r0, #1
 80006b6:	f7ff fefd 	bl	80004b4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80006ba:	f7ff ff1b 	bl	80004f4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80006be:	f7ff fed5 	bl	800046c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80006c2:	bf00      	nop
 80006c4:	f7ff fee2 	bl	800048c <LL_RCC_PLL_IsReady>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d1fa      	bne.n	80006c4 <SystemClock_Config_exp1+0x64>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80006ce:	2003      	movs	r0, #3
 80006d0:	f7ff fe22 	bl	8000318 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80006d4:	bf00      	nop
 80006d6:	f7ff fe33 	bl	8000340 <LL_RCC_GetSysClkSource>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b0c      	cmp	r3, #12
 80006de:	d1fa      	bne.n	80006d6 <SystemClock_Config_exp1+0x76>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe3b 	bl	800035c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80006e6:	2000      	movs	r0, #0
 80006e8:	f7ff fe4c 	bl	8000384 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f7ff fe5d 	bl	80003ac <LL_RCC_SetAPB2Prescaler>

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(80000000);
 80006f2:	4802      	ldr	r0, [pc, #8]	; (80006fc <SystemClock_Config_exp1+0x9c>)
 80006f4:	f000 fcc6 	bl	8001084 <LL_SetSystemCoreClock>

}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	04c4b400 	.word	0x04c4b400

08000700 <SystemClock_Config_exp2>:
void SystemClock_Config_exp2(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_1);
 8000704:	2001      	movs	r0, #1
 8000706:	f7ff ff89 	bl	800061c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_1)
 800070a:	bf00      	nop
 800070c:	f7ff ff9a 	bl	8000644 <LL_FLASH_GetLatency>
 8000710:	4603      	mov	r3, r0
 8000712:	2b01      	cmp	r3, #1
 8000714:	d1fa      	bne.n	800070c <SystemClock_Config_exp2+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000716:	f44f 7000 	mov.w	r0, #512	; 0x200
 800071a:	f7ff fefb 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_MSI_Enable();
 800071e:	f7ff fd9f 	bl	8000260 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000722:	bf00      	nop
 8000724:	f7ff fdac 	bl	8000280 <LL_RCC_MSI_IsReady>
 8000728:	4603      	mov	r3, r0
 800072a:	2b01      	cmp	r3, #1
 800072c:	d1fa      	bne.n	8000724 <SystemClock_Config_exp2+0x24>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800072e:	f7ff fdb9 	bl	80002a4 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000732:	2090      	movs	r0, #144	; 0x90
 8000734:	f7ff fdc6 	bl	80002c4 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000738:	2000      	movs	r0, #0
 800073a:	f7ff fdd7 	bl	80002ec <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
 800073e:	2000      	movs	r0, #0
 8000740:	f7ff fdea 	bl	8000318 <LL_RCC_SetSysClkSource>

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000744:	2000      	movs	r0, #0
 8000746:	f7ff fe09 	bl	800035c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fe1a 	bl	8000384 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000750:	2000      	movs	r0, #0
 8000752:	f7ff fe2b 	bl	80003ac <LL_RCC_SetAPB2Prescaler>

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(24000000);
 8000756:	4802      	ldr	r0, [pc, #8]	; (8000760 <SystemClock_Config_exp2+0x60>)
 8000758:	f000 fc94 	bl	8001084 <LL_SetSystemCoreClock>
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	016e3600 	.word	0x016e3600

08000764 <SystemClock_Config_exp3>:

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(24000000);
}
void SystemClock_Config_exp3(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000768:	2003      	movs	r0, #3
 800076a:	f7ff ff57 	bl	800061c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800076e:	bf00      	nop
 8000770:	f7ff ff68 	bl	8000644 <LL_FLASH_GetLatency>
 8000774:	4603      	mov	r3, r0
 8000776:	2b03      	cmp	r3, #3
 8000778:	d1fa      	bne.n	8000770 <SystemClock_Config_exp3+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 800077a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800077e:	f7ff fec9 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8000782:	f7ff fd47 	bl	8000214 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000786:	bf00      	nop
 8000788:	f7ff fd56 	bl	8000238 <LL_RCC_LSI_IsReady>
 800078c:	4603      	mov	r3, r0
 800078e:	2b01      	cmp	r3, #1
 8000790:	d1fa      	bne.n	8000788 <SystemClock_Config_exp3+0x24>
  {

  }
  LL_PWR_EnableBkUpAccess();
 8000792:	f7ff fed3 	bl	800053c <LL_PWR_EnableBkUpAccess>
  //LL_RCC_ForceBackupDomainReset();
  //LL_RCC_ReleaseBackupDomainReset();
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f7ff fe1b 	bl	80003d4 <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 800079e:	f7ff fe2f 	bl	8000400 <LL_RCC_EnableRTC>

  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007a2:	2000      	movs	r0, #0
 80007a4:	f7ff fdda 	bl	800035c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f7ff fdeb 	bl	8000384 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007ae:	2000      	movs	r0, #0
 80007b0:	f7ff fdfc 	bl	80003ac <LL_RCC_SetAPB2Prescaler>

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(24000000);
 80007b4:	4802      	ldr	r0, [pc, #8]	; (80007c0 <SystemClock_Config_exp3+0x5c>)
 80007b6:	f000 fc65 	bl	8001084 <LL_SetSystemCoreClock>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	016e3600 	.word	0x016e3600

080007c4 <RTC_Init_ColdStart>:
void RTC_Init_ColdStart(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
    // Enable LSE oscillator
    LL_RCC_ForceBackupDomainReset();
 80007c8:	f7ff fe2c 	bl	8000424 <LL_RCC_ForceBackupDomainReset>
    LL_RCC_ReleaseBackupDomainReset();
 80007cc:	f7ff fe3c 	bl	8000448 <LL_RCC_ReleaseBackupDomainReset>
    LL_RCC_LSE_Enable();
 80007d0:	f7ff fcfa 	bl	80001c8 <LL_RCC_LSE_Enable>
    while (LL_RCC_LSE_IsReady() != 1)
 80007d4:	bf00      	nop
 80007d6:	f7ff fd09 	bl	80001ec <LL_RCC_LSE_IsReady>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d1fa      	bne.n	80007d6 <RTC_Init_ColdStart+0x12>
    {
    }

    // Configure RTC prescalers
    LL_RTC_DisableWriteProtection(RTC);
 80007e0:	480b      	ldr	r0, [pc, #44]	; (8000810 <RTC_Init_ColdStart+0x4c>)
 80007e2:	f7ff fef1 	bl	80005c8 <LL_RTC_DisableWriteProtection>
    LL_RTC_SetAsynchPrescaler(RTC, 0x7F);
 80007e6:	217f      	movs	r1, #127	; 0x7f
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <RTC_Init_ColdStart+0x4c>)
 80007ea:	f7ff feb7 	bl	800055c <LL_RTC_SetAsynchPrescaler>
    LL_RTC_SetSynchPrescaler(RTC, 0xFF);
 80007ee:	21ff      	movs	r1, #255	; 0xff
 80007f0:	4807      	ldr	r0, [pc, #28]	; (8000810 <RTC_Init_ColdStart+0x4c>)
 80007f2:	f7ff fec7 	bl	8000584 <LL_RTC_SetSynchPrescaler>
    LL_RTC_EnableWriteProtection(RTC);
 80007f6:	4806      	ldr	r0, [pc, #24]	; (8000810 <RTC_Init_ColdStart+0x4c>)
 80007f8:	f7ff fed9 	bl	80005ae <LL_RTC_EnableWriteProtection>

    // Reset BKP_DR0 to a known initial value (1 in this case)
    LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, 1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2100      	movs	r1, #0
 8000800:	4803      	ldr	r0, [pc, #12]	; (8000810 <RTC_Init_ColdStart+0x4c>)
 8000802:	f7ff fef1 	bl	80005e8 <LL_RTC_BAK_SetRegister>

    LL_RCC_EnableRTC();
 8000806:	f7ff fdfb 	bl	8000400 <LL_RCC_EnableRTC>
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40002800 	.word	0x40002800

08000814 <RTC_Init_HotStart>:

void RTC_Init_HotStart(void){
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
    // Configure RTC prescalers
    LL_RTC_DisableWriteProtection(RTC);
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <RTC_Init_HotStart+0x28>)
 800081a:	f7ff fed5 	bl	80005c8 <LL_RTC_DisableWriteProtection>
    LL_RTC_SetAsynchPrescaler(RTC, 0x7F);
 800081e:	217f      	movs	r1, #127	; 0x7f
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <RTC_Init_HotStart+0x28>)
 8000822:	f7ff fe9b 	bl	800055c <LL_RTC_SetAsynchPrescaler>
    LL_RTC_SetSynchPrescaler(RTC, 0xFF);
 8000826:	21ff      	movs	r1, #255	; 0xff
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <RTC_Init_HotStart+0x28>)
 800082a:	f7ff feab 	bl	8000584 <LL_RTC_SetSynchPrescaler>
    LL_RTC_EnableWriteProtection(RTC);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <RTC_Init_HotStart+0x28>)
 8000830:	f7ff febd 	bl	80005ae <LL_RTC_EnableWriteProtection>

    // Reset BKP_DR0 to a known initial value (1 in this case)
    //LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, 1);

    LL_RCC_EnableRTC();
 8000834:	f7ff fde4 	bl	8000400 <LL_RCC_EnableRTC>
}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	40002800 	.word	0x40002800

08000840 <SystemClock_Config_exp5>:
void SystemClock_Config_exp5(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000844:	2003      	movs	r0, #3
 8000846:	f7ff fee9 	bl	800061c <LL_FLASH_SetLatency>
	  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800084a:	bf00      	nop
 800084c:	f7ff fefa 	bl	8000644 <LL_FLASH_GetLatency>
 8000850:	4603      	mov	r3, r0
 8000852:	2b03      	cmp	r3, #3
 8000854:	d1fa      	bne.n	800084c <SystemClock_Config_exp5+0xc>
	  {
	  }
	  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8000856:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800085a:	f7ff fe5b 	bl	8000514 <LL_PWR_SetRegulVoltageScaling>
	  LL_RCC_LSI_Enable();
 800085e:	f7ff fcd9 	bl	8000214 <LL_RCC_LSI_Enable>

	   /* Wait till LSI is ready */
	  while(LL_RCC_LSI_IsReady() != 1)
 8000862:	bf00      	nop
 8000864:	f7ff fce8 	bl	8000238 <LL_RCC_LSI_IsReady>
 8000868:	4603      	mov	r3, r0
 800086a:	2b01      	cmp	r3, #1
 800086c:	d1fa      	bne.n	8000864 <SystemClock_Config_exp5+0x24>
	  {

	  }
	  LL_RCC_MSI_Enable();
 800086e:	f7ff fcf7 	bl	8000260 <LL_RCC_MSI_Enable>

	   /* Wait till MSI is ready */
	  while(LL_RCC_MSI_IsReady() != 1)
 8000872:	bf00      	nop
 8000874:	f7ff fd04 	bl	8000280 <LL_RCC_MSI_IsReady>
 8000878:	4603      	mov	r3, r0
 800087a:	2b01      	cmp	r3, #1
 800087c:	d1fa      	bne.n	8000874 <SystemClock_Config_exp5+0x34>
	  {

	  }
	  LL_RCC_MSI_EnableRangeSelection();
 800087e:	f7ff fd11 	bl	80002a4 <LL_RCC_MSI_EnableRangeSelection>
	  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 8000882:	2090      	movs	r0, #144	; 0x90
 8000884:	f7ff fd1e 	bl	80002c4 <LL_RCC_MSI_SetRange>
	  LL_RCC_MSI_SetCalibTrimming(0);
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fd2f 	bl	80002ec <LL_RCC_MSI_SetCalibTrimming>
	  LL_PWR_EnableBkUpAccess();
 800088e:	f7ff fe55 	bl	800053c <LL_PWR_EnableBkUpAccess>
	  //LL_RCC_ForceBackupDomainReset();
	  //LL_RCC_ReleaseBackupDomainReset();
	  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8000892:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000896:	f7ff fd9d 	bl	80003d4 <LL_RCC_SetRTCClockSource>
	  LL_RCC_EnableRTC();
 800089a:	f7ff fdb1 	bl	8000400 <LL_RCC_EnableRTC>

	  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800089e:	2000      	movs	r0, #0
 80008a0:	f7ff fd5c 	bl	800035c <LL_RCC_SetAHBPrescaler>
	  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008a4:	2000      	movs	r0, #0
 80008a6:	f7ff fd6d 	bl	8000384 <LL_RCC_SetAPB1Prescaler>
	  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff fd7e 	bl	80003ac <LL_RCC_SetAPB2Prescaler>

	  //update global variable SystemCoreClock --> give access to CPU clock frequency.
	  LL_SetSystemCoreClock(24000000);
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <SystemClock_Config_exp5+0x7c>)
 80008b2:	f000 fbe7 	bl	8001084 <LL_SetSystemCoreClock>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	016e3600 	.word	0x016e3600

080008c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80008d4:	4b05      	ldr	r3, [pc, #20]	; (80008ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80008d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4013      	ands	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	bf00      	nop
 80008e2:	3714      	adds	r7, #20
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b08b      	sub	sp, #44	; 0x2c
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	60f8      	str	r0, [r7, #12]
 80008f8:	60b9      	str	r1, [r7, #8]
 80008fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	fa93 f3a3 	rbit	r3, r3
 800090a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800090c:	693b      	ldr	r3, [r7, #16]
 800090e:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000916:	2320      	movs	r3, #32
 8000918:	e003      	b.n	8000922 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	b2db      	uxtb	r3, r3
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	2103      	movs	r1, #3
 8000926:	fa01 f303 	lsl.w	r3, r1, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	401a      	ands	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000932:	6a3b      	ldr	r3, [r7, #32]
 8000934:	fa93 f3a3 	rbit	r3, r3
 8000938:	61fb      	str	r3, [r7, #28]
  return result;
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800093e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000940:	2b00      	cmp	r3, #0
 8000942:	d101      	bne.n	8000948 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000944:	2320      	movs	r3, #32
 8000946:	e003      	b.n	8000950 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800094a:	fab3 f383 	clz	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	431a      	orrs	r2, r3
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	601a      	str	r2, [r3, #0]
}
 800095e:	bf00      	nop
 8000960:	372c      	adds	r7, #44	; 0x2c
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800096a:	b480      	push	{r7}
 800096c:	b085      	sub	sp, #20
 800096e:	af00      	add	r7, sp, #0
 8000970:	60f8      	str	r0, [r7, #12]
 8000972:	60b9      	str	r1, [r7, #8]
 8000974:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	685a      	ldr	r2, [r3, #4]
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	43db      	mvns	r3, r3
 800097e:	401a      	ands	r2, r3
 8000980:	68bb      	ldr	r3, [r7, #8]
 8000982:	6879      	ldr	r1, [r7, #4]
 8000984:	fb01 f303 	mul.w	r3, r1, r3
 8000988:	431a      	orrs	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	605a      	str	r2, [r3, #4]
}
 800098e:	bf00      	nop
 8000990:	3714      	adds	r7, #20
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	691a      	ldr	r2, [r3, #16]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	4013      	ands	r3, r2
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	d101      	bne.n	80009b6 <LL_GPIO_IsInputPinSet+0x1c>
 80009b2:	2301      	movs	r3, #1
 80009b4:	e000      	b.n	80009b8 <LL_GPIO_IsInputPinSet+0x1e>
 80009b6:	2300      	movs	r3, #0
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	683a      	ldr	r2, [r7, #0]
 80009d2:	619a      	str	r2, [r3, #24]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <GPIO_init>:
#define LED_PIN LL_GPIO_PIN_5
#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13

void GPIO_init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 8000a00:	2001      	movs	r0, #1
 8000a02:	f7ff ff5d 	bl	80008c0 <LL_AHB2_GRP1_EnableClock>
// Green LED --> User LED
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 8000a06:	2201      	movs	r2, #1
 8000a08:	2120      	movs	r1, #32
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f7ff ff6f 	bl	80008f0 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 8000a12:	2200      	movs	r2, #0
 8000a14:	2120      	movs	r1, #32
 8000a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1a:	f7ff ffa6 	bl	800096a <LL_GPIO_SetPinOutputType>
LL_GPIO_SetPinOutputType( GPIOB, LL_GPIO_PIN_11, LL_GPIO_OUTPUT_PUSHPULL );
LL_GPIO_SetPinPull( GPIOB, LL_GPIO_PIN_11, LL_GPIO_PULL_NO );
#endif

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 8000a1e:	2004      	movs	r0, #4
 8000a20:	f7ff ff4e 	bl	80008c0 <LL_AHB2_GRP1_EnableClock>
// Blue button conected to pin PC13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 8000a24:	2200      	movs	r2, #0
 8000a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a2a:	4808      	ldr	r0, [pc, #32]	; (8000a4c <GPIO_init+0x50>)
 8000a2c:	f7ff ff60 	bl	80008f0 <LL_GPIO_SetPinMode>

// pin PC10 for oscillator stability measurement
LL_GPIO_SetPinMode( GPIOC, LL_GPIO_PIN_10, LL_GPIO_MODE_OUTPUT );
 8000a30:	2201      	movs	r2, #1
 8000a32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a36:	4805      	ldr	r0, [pc, #20]	; (8000a4c <GPIO_init+0x50>)
 8000a38:	f7ff ff5a 	bl	80008f0 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( GPIOC, LL_GPIO_PIN_10, LL_GPIO_OUTPUT_PUSHPULL );
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a42:	4802      	ldr	r0, [pc, #8]	; (8000a4c <GPIO_init+0x50>)
 8000a44:	f7ff ff91 	bl	800096a <LL_GPIO_SetPinOutputType>

}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	48000800 	.word	0x48000800

08000a50 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if	( val ) {
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d005      	beq.n	8000a6a <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 8000a5e:	2120      	movs	r1, #32
 8000a60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a64:	f7ff ffae 	bl	80009c4 <LL_GPIO_SetOutputPin>
	}
	else {
		LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
	}
}
 8000a68:	e004      	b.n	8000a74 <LED_GREEN+0x24>
		LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f7ff ffb6 	bl	80009e0 <LL_GPIO_ResetOutputPin>
}
 8000a74:	bf00      	nop
 8000a76:	3708      	adds	r7, #8
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 8000a80:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <BLUE_BUTTON+0x20>)
 8000a86:	f7ff ff88 	bl	800099a <LL_GPIO_IsInputPinSet>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	bf0c      	ite	eq
 8000a90:	2301      	moveq	r3, #1
 8000a92:	2300      	movne	r3, #0
 8000a94:	b2db      	uxtb	r3, r3
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	48000800 	.word	0x48000800

08000aa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b085      	sub	sp, #20
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ab6:	68ba      	ldr	r2, [r7, #8]
 8000ab8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000abc:	4013      	ands	r3, r2
 8000abe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ad0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ad2:	4a04      	ldr	r2, [pc, #16]	; (8000ae4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	60d3      	str	r3, [r2, #12]
}
 8000ad8:	bf00      	nop
 8000ada:	3714      	adds	r7, #20
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ffc2 	bl	8000ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <LL_RCC_LSE_IsReady>:
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <LL_RCC_LSE_IsReady+0x24>)
 8000b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	2b02      	cmp	r3, #2
 8000b90:	d101      	bne.n	8000b96 <LL_RCC_LSE_IsReady+0x16>
 8000b92:	2301      	movs	r3, #1
 8000b94:	e000      	b.n	8000b98 <LL_RCC_LSE_IsReady+0x18>
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000

08000ba8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bb4:	4907      	ldr	r1, [pc, #28]	; (8000bd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bbc:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4013      	ands	r3, r2
 8000bc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	3714      	adds	r7, #20
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b085      	sub	sp, #20
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000be2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40021000 	.word	0x40021000

08000c08 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <LL_LPM_EnableSleep+0x1c>)
 8000c0e:	691b      	ldr	r3, [r3, #16]
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <LL_LPM_EnableSleep+0x1c>)
 8000c12:	f023 0304 	bic.w	r3, r3, #4
 8000c16:	6113      	str	r3, [r2, #16]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <LL_PWR_EnableBkUpAccess>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <LL_PWR_EnableBkUpAccess+0x1c>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
}
 8000c38:	bf00      	nop
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	40007000 	.word	0x40007000

08000c48 <LL_RTC_BAK_SetRegister>:
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3350      	adds	r3, #80	; 0x50
 8000c5c:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4413      	add	r3, r2
 8000c66:	617b      	str	r3, [r7, #20]
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	601a      	str	r2, [r3, #0]
}
 8000c6e:	bf00      	nop
 8000c70:	371c      	adds	r7, #28
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <LL_RTC_BAK_GetRegister>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval Value between Min_Data=0x00 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_BAK_GetRegister(RTC_TypeDef *RTCx, uint32_t BackupRegister)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	b085      	sub	sp, #20
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	6078      	str	r0, [r7, #4]
 8000c82:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]

  tmp = (uint32_t)(&(RTCx->BKP0R));
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3350      	adds	r3, #80	; 0x50
 8000c8c:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4413      	add	r3, r2
 8000c96:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <save_and_increment_expe>:
volatile int Actual_State_Blue_Button = 0;
volatile int Sleep_State = 0;
volatile int expe = 1;
volatile int a=0;

void save_and_increment_expe(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
    // Check if blue button is pressed
    if (BLUE_BUTTON()) {
 8000cae:	f7ff fee5 	bl	8000a7c <BLUE_BUTTON>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d00e      	beq.n	8000cd6 <save_and_increment_expe+0x2e>
        // Read the backup register value
        uint32_t expe_backup = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <save_and_increment_expe+0x38>)
 8000cbc:	f7ff ffdd 	bl	8000c7a <LL_RTC_BAK_GetRegister>
 8000cc0:	6078      	str	r0, [r7, #4]
        // Increment expe and ensure it loops from 1 to 8
        expe_backup = (expe_backup % 8) + 1;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	3301      	adds	r3, #1
 8000cca:	607b      	str	r3, [r7, #4]
        // Write the new value to the backup register
        LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, expe_backup);
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <save_and_increment_expe+0x38>)
 8000cd2:	f7ff ffb9 	bl	8000c48 <LL_RTC_BAK_SetRegister>
    }
}
 8000cd6:	bf00      	nop
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40002800 	.word	0x40002800

08000ce4 <main>:


int main(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
	/*clock domains activation*/
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000ce8:	2001      	movs	r0, #1
 8000cea:	f7ff ff75 	bl	8000bd8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000cee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000cf2:	f7ff ff59 	bl	8000ba8 <LL_APB1_GRP1_EnableClock>
	GPIO_init();
 8000cf6:	f7ff fe81 	bl	80009fc <GPIO_init>
	LL_PWR_EnableBkUpAccess();
 8000cfa:	f7ff ff95 	bl	8000c28 <LL_PWR_EnableBkUpAccess>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfe:	2003      	movs	r0, #3
 8000d00:	f7ff fece 	bl	8000aa0 <__NVIC_SetPriorityGrouping>
	if (LL_RCC_LSE_IsReady()==1){
 8000d04:	f7ff ff3c 	bl	8000b80 <LL_RCC_LSE_IsReady>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d102      	bne.n	8000d14 <main+0x30>
		RTC_Init_HotStart();
 8000d0e:	f7ff fd81 	bl	8000814 <RTC_Init_HotStart>
 8000d12:	e001      	b.n	8000d18 <main+0x34>
	}else{
		RTC_Init_ColdStart();
 8000d14:	f7ff fd56 	bl	80007c4 <RTC_Init_ColdStart>
	}

	//SystemClock_Config_exp1();
	save_and_increment_expe();
 8000d18:	f7ff ffc6 	bl	8000ca8 <save_and_increment_expe>
	// Initialize expe with the value from the backup register
	expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4821      	ldr	r0, [pc, #132]	; (8000da4 <main+0xc0>)
 8000d20:	f7ff ffab 	bl	8000c7a <LL_RTC_BAK_GetRegister>
 8000d24:	4603      	mov	r3, r0
 8000d26:	461a      	mov	r2, r3
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <main+0xc4>)
 8000d2a:	601a      	str	r2, [r3, #0]
	/* Configure the system clock */
	if (expe == 1) {
 8000d2c:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <main+0xc4>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d103      	bne.n	8000d3c <main+0x58>
		SystemClock_Config_exp1();
 8000d34:	f7ff fc94 	bl	8000660 <SystemClock_Config_exp1>
		LL_LPM_EnableSleep();
 8000d38:	f7ff ff66 	bl	8000c08 <LL_LPM_EnableSleep>
	}
	if (expe == 2) {
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <main+0xc4>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2b02      	cmp	r3, #2
 8000d42:	d101      	bne.n	8000d48 <main+0x64>
		SystemClock_Config_exp2();
 8000d44:	f7ff fcdc 	bl	8000700 <SystemClock_Config_exp2>
		//SystemClock_Config_exp2_blue();
	}
	if (expe == 3) {
 8000d48:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <main+0xc4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d103      	bne.n	8000d58 <main+0x74>
		SystemClock_Config_exp3();
 8000d50:	f7ff fd08 	bl	8000764 <SystemClock_Config_exp3>
		LL_LPM_EnableSleep();
 8000d54:	f7ff ff58 	bl	8000c08 <LL_LPM_EnableSleep>
	}
	if (expe == 5) {
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <main+0xc4>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b05      	cmp	r3, #5
 8000d5e:	d10c      	bne.n	8000d7a <main+0x96>
		SystemClock_Config_exp5();
 8000d60:	f7ff fd6e 	bl	8000840 <SystemClock_Config_exp5>

		RCC->CR |= RCC_CR_MSIPLLEN;
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <main+0xc8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a10      	ldr	r2, [pc, #64]	; (8000dac <main+0xc8>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6013      	str	r3, [r2, #0]
		LL_LPM_EnableSleep();
 8000d70:	f7ff ff4a 	bl	8000c08 <LL_LPM_EnableSleep>
		Sleep_State = 1;
 8000d74:	4b0e      	ldr	r3, [pc, #56]	; (8000db0 <main+0xcc>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]


	//initialization of systick timer (tick period set at 1 ms)
	//LL_Init1msTick( SystemCoreClock );
	//set priority
	NVIC_SetPriority(SysTick_IRQn, -1);
 8000d7a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8000d82:	f7ff feb1 	bl	8000ae8 <__NVIC_SetPriority>
	//Set the Systick reload value for a 10ms overflow
	SysTick_Config(SystemCoreClock / 100); // 10ms overflow
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <main+0xd0>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a0b      	ldr	r2, [pc, #44]	; (8000db8 <main+0xd4>)
 8000d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d90:	095b      	lsrs	r3, r3, #5
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff fed2 	bl	8000b3c <SysTick_Config>
	//Enable the simple sleep mode

	while (1) {
		if (Sleep_State == 1)
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <main+0xcc>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d1fb      	bne.n	8000d98 <main+0xb4>
			__WFI();
 8000da0:	bf30      	wfi
		if (Sleep_State == 1)
 8000da2:	e7f9      	b.n	8000d98 <main+0xb4>
 8000da4:	40002800 	.word	0x40002800
 8000da8:	20000000 	.word	0x20000000
 8000dac:	40021000 	.word	0x40021000
 8000db0:	2000002c 	.word	0x2000002c
 8000db4:	20000004 	.word	0x20000004
 8000db8:	51eb851f 	.word	0x51eb851f

08000dbc <SysTick_Handler>:

	}
}

// systick interrupt handler
void SysTick_Handler(void) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	millis += 10;
 8000dc0:	4b67      	ldr	r3, [pc, #412]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	330a      	adds	r3, #10
 8000dc6:	4a66      	ldr	r2, [pc, #408]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000dc8:	6013      	str	r3, [r2, #0]
	if (expe == 2) {
 8000dca:	4b66      	ldr	r3, [pc, #408]	; (8000f64 <SysTick_Handler+0x1a8>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d12a      	bne.n	8000e28 <SysTick_Handler+0x6c>
		GPIOC->ODR ^= (1 << 10);
 8000dd2:	4b65      	ldr	r3, [pc, #404]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000dd4:	695b      	ldr	r3, [r3, #20]
 8000dd6:	4a64      	ldr	r2, [pc, #400]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000dd8:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000ddc:	6153      	str	r3, [r2, #20]

		if (LED_ON == 1 && millis >= 100) {
 8000dde:	4b63      	ldr	r3, [pc, #396]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b01      	cmp	r3, #1
 8000de4:	d10d      	bne.n	8000e02 <SysTick_Handler+0x46>
 8000de6:	4b5e      	ldr	r3, [pc, #376]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	2b63      	cmp	r3, #99	; 0x63
 8000dec:	d909      	bls.n	8000e02 <SysTick_Handler+0x46>
			LED_GREEN(0);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f7ff fe2e 	bl	8000a50 <LED_GREEN>
			LED_ON = 0;
 8000df4:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000dfa:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e012      	b.n	8000e28 <SysTick_Handler+0x6c>
		} else if (LED_ON == 0 && millis >= 1900) {
 8000e02:	4b5a      	ldr	r3, [pc, #360]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d10e      	bne.n	8000e28 <SysTick_Handler+0x6c>
 8000e0a:	4b55      	ldr	r3, [pc, #340]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f240 726b 	movw	r2, #1899	; 0x76b
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d908      	bls.n	8000e28 <SysTick_Handler+0x6c>
			LED_GREEN(1);
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff fe1a 	bl	8000a50 <LED_GREEN>
			LED_ON = 1;
 8000e1c:	4b53      	ldr	r3, [pc, #332]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e1e:	2201      	movs	r2, #1
 8000e20:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000e22:	4b4f      	ldr	r3, [pc, #316]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
		}
	}
	if (expe == 3) {
 8000e28:	4b4e      	ldr	r3, [pc, #312]	; (8000f64 <SysTick_Handler+0x1a8>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	d132      	bne.n	8000e96 <SysTick_Handler+0xda>
		GPIOC->ODR ^= (1 << 10);
 8000e30:	4b4d      	ldr	r3, [pc, #308]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	4a4c      	ldr	r2, [pc, #304]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000e36:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000e3a:	6153      	str	r3, [r2, #20]
		if (BLUE_BUTTON())
 8000e3c:	f7ff fe1e 	bl	8000a7c <BLUE_BUTTON>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <SysTick_Handler+0x90>
			Sleep_State = 1;
 8000e46:	4b4a      	ldr	r3, [pc, #296]	; (8000f70 <SysTick_Handler+0x1b4>)
 8000e48:	2201      	movs	r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
		if (LED_ON == 1 && millis >= 150) {
 8000e4c:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10d      	bne.n	8000e70 <SysTick_Handler+0xb4>
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b95      	cmp	r3, #149	; 0x95
 8000e5a:	d909      	bls.n	8000e70 <SysTick_Handler+0xb4>
			LED_GREEN(0);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f7ff fdf7 	bl	8000a50 <LED_GREEN>
			LED_ON = 0;
 8000e62:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000e68:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	e012      	b.n	8000e96 <SysTick_Handler+0xda>
		} else if (LED_ON == 0 && millis >= 1850) {
 8000e70:	4b3e      	ldr	r3, [pc, #248]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10e      	bne.n	8000e96 <SysTick_Handler+0xda>
 8000e78:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f240 7239 	movw	r2, #1849	; 0x739
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d908      	bls.n	8000e96 <SysTick_Handler+0xda>
			LED_GREEN(1);
 8000e84:	2001      	movs	r0, #1
 8000e86:	f7ff fde3 	bl	8000a50 <LED_GREEN>
			LED_ON = 1;
 8000e8a:	4b38      	ldr	r3, [pc, #224]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000e90:	4b33      	ldr	r3, [pc, #204]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
		}
	}
	if (expe == 5) {
 8000e96:	4b33      	ldr	r3, [pc, #204]	; (8000f64 <SysTick_Handler+0x1a8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d12c      	bne.n	8000ef8 <SysTick_Handler+0x13c>
		GPIOC->ODR ^= (1 << 10);
 8000e9e:	4b32      	ldr	r3, [pc, #200]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000ea0:	695b      	ldr	r3, [r3, #20]
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <SysTick_Handler+0x1ac>)
 8000ea4:	f483 6380 	eor.w	r3, r3, #1024	; 0x400
 8000ea8:	6153      	str	r3, [r2, #20]
		if (BLUE_BUTTON())
 8000eaa:	f7ff fde7 	bl	8000a7c <BLUE_BUTTON>
		{
		}
		if (LED_ON == 1 && millis >= 250) {
 8000eae:	4b2f      	ldr	r3, [pc, #188]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d10d      	bne.n	8000ed2 <SysTick_Handler+0x116>
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	2bf9      	cmp	r3, #249	; 0xf9
 8000ebc:	d909      	bls.n	8000ed2 <SysTick_Handler+0x116>
			LED_GREEN(0);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f7ff fdc6 	bl	8000a50 <LED_GREEN>
			LED_ON = 0;
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	e012      	b.n	8000ef8 <SysTick_Handler+0x13c>
		} else if (LED_ON == 0 && millis >= 1750) {
 8000ed2:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10e      	bne.n	8000ef8 <SysTick_Handler+0x13c>
 8000eda:	4b21      	ldr	r3, [pc, #132]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f240 62d5 	movw	r2, #1749	; 0x6d5
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d908      	bls.n	8000ef8 <SysTick_Handler+0x13c>
			LED_GREEN(1);
 8000ee6:	2001      	movs	r0, #1
 8000ee8:	f7ff fdb2 	bl	8000a50 <LED_GREEN>
			LED_ON = 1;
 8000eec:	4b1f      	ldr	r3, [pc, #124]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000eee:	2201      	movs	r2, #1
 8000ef0:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000ef2:	4b1b      	ldr	r3, [pc, #108]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
		}
	}
	if (expe == 1) {
 8000ef8:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <SysTick_Handler+0x1a8>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d12c      	bne.n	8000f5a <SysTick_Handler+0x19e>
		if (BLUE_BUTTON())
 8000f00:	f7ff fdbc 	bl	8000a7c <BLUE_BUTTON>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d002      	beq.n	8000f10 <SysTick_Handler+0x154>
			Sleep_State = 1;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <SysTick_Handler+0x1b4>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]
		//MSI_State=0;
		//to be defined if systick interrupt is enabled.
		if (LED_ON == 1 && millis >= T_LED_ON) {
 8000f10:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d10d      	bne.n	8000f34 <SysTick_Handler+0x178>
 8000f18:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b31      	cmp	r3, #49	; 0x31
 8000f1e:	d909      	bls.n	8000f34 <SysTick_Handler+0x178>
			LED_GREEN(0);
 8000f20:	2000      	movs	r0, #0
 8000f22:	f7ff fd95 	bl	8000a50 <LED_GREEN>
			LED_ON = 0;
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
			LED_GREEN(1);
			LED_ON = 1;
			millis = 0;
		}
	}
}
 8000f32:	e012      	b.n	8000f5a <SysTick_Handler+0x19e>
		} else if (LED_ON == 0 && millis >= T_LED_OFF) {
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10e      	bne.n	8000f5a <SysTick_Handler+0x19e>
 8000f3c:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d908      	bls.n	8000f5a <SysTick_Handler+0x19e>
			LED_GREEN(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff fd81 	bl	8000a50 <LED_GREEN>
			LED_ON = 1;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <SysTick_Handler+0x1b0>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
			millis = 0;
 8000f54:	4b02      	ldr	r3, [pc, #8]	; (8000f60 <SysTick_Handler+0x1a4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000024 	.word	0x20000024
 8000f64:	20000000 	.word	0x20000000
 8000f68:	48000800 	.word	0x48000800
 8000f6c:	20000028 	.word	0x20000028
 8000f70:	2000002c 	.word	0x2000002c

08000f74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <HardFault_Handler+0x4>

08000f88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <MemManage_Handler+0x4>

08000f8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <BusFault_Handler+0x4>

08000f94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <UsageFault_Handler+0x4>

08000f9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr

08000fa8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SystemInit+0x64>)
 8000fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <SystemInit+0x64>)
 8000fd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fd8:	4b14      	ldr	r3, [pc, #80]	; (800102c <SystemInit+0x68>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a13      	ldr	r2, [pc, #76]	; (800102c <SystemInit+0x68>)
 8000fde:	f043 0301 	orr.w	r3, r3, #1
 8000fe2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fe4:	4b11      	ldr	r3, [pc, #68]	; (800102c <SystemInit+0x68>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fea:	4b10      	ldr	r3, [pc, #64]	; (800102c <SystemInit+0x68>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a0f      	ldr	r2, [pc, #60]	; (800102c <SystemInit+0x68>)
 8000ff0:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000ff4:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000ff8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	; (800102c <SystemInit+0x68>)
 8000ffc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001000:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001002:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SystemInit+0x68>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a09      	ldr	r2, [pc, #36]	; (800102c <SystemInit+0x68>)
 8001008:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <SystemInit+0x68>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SystemInit+0x64>)
 8001016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800101a:	609a      	str	r2, [r3, #8]
#endif
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	e000ed00 	.word	0xe000ed00
 800102c:	40021000 	.word	0x40021000

08001030 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001030:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001068 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001034:	f7ff ffc6 	bl	8000fc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001038:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800103a:	e003      	b.n	8001044 <LoopCopyDataInit>

0800103c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800103c:	4b0b      	ldr	r3, [pc, #44]	; (800106c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800103e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001040:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001042:	3104      	adds	r1, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001046:	4b0b      	ldr	r3, [pc, #44]	; (8001074 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001048:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800104a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800104c:	d3f6      	bcc.n	800103c <CopyDataInit>
	ldr	r2, =_sbss
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001050:	e002      	b.n	8001058 <LoopFillZerobss>

08001052 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001052:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001054:	f842 3b04 	str.w	r3, [r2], #4

08001058 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <LoopForever+0x16>)
	cmp	r2, r3
 800105a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800105c:	d3f9      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105e:	f000 f821 	bl	80010a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001062:	f7ff fe3f 	bl	8000ce4 <main>

08001066 <LoopForever>:

LoopForever:
    b LoopForever
 8001066:	e7fe      	b.n	8001066 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001068:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800106c:	0800110c 	.word	0x0800110c
	ldr	r0, =_sdata
 8001070:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001074:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001078:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 800107c:	20000030 	.word	0x20000030

08001080 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001080:	e7fe      	b.n	8001080 <ADC1_2_IRQHandler>
	...

08001084 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <LL_SetSystemCoreClock+0x1c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6013      	str	r3, [r2, #0]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000004 	.word	0x20000004

080010a4 <__libc_init_array>:
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	4d0d      	ldr	r5, [pc, #52]	; (80010dc <__libc_init_array+0x38>)
 80010a8:	4c0d      	ldr	r4, [pc, #52]	; (80010e0 <__libc_init_array+0x3c>)
 80010aa:	1b64      	subs	r4, r4, r5
 80010ac:	10a4      	asrs	r4, r4, #2
 80010ae:	2600      	movs	r6, #0
 80010b0:	42a6      	cmp	r6, r4
 80010b2:	d109      	bne.n	80010c8 <__libc_init_array+0x24>
 80010b4:	4d0b      	ldr	r5, [pc, #44]	; (80010e4 <__libc_init_array+0x40>)
 80010b6:	4c0c      	ldr	r4, [pc, #48]	; (80010e8 <__libc_init_array+0x44>)
 80010b8:	f000 f818 	bl	80010ec <_init>
 80010bc:	1b64      	subs	r4, r4, r5
 80010be:	10a4      	asrs	r4, r4, #2
 80010c0:	2600      	movs	r6, #0
 80010c2:	42a6      	cmp	r6, r4
 80010c4:	d105      	bne.n	80010d2 <__libc_init_array+0x2e>
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
 80010c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80010cc:	4798      	blx	r3
 80010ce:	3601      	adds	r6, #1
 80010d0:	e7ee      	b.n	80010b0 <__libc_init_array+0xc>
 80010d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80010d6:	4798      	blx	r3
 80010d8:	3601      	adds	r6, #1
 80010da:	e7f2      	b.n	80010c2 <__libc_init_array+0x1e>
 80010dc:	08001104 	.word	0x08001104
 80010e0:	08001104 	.word	0x08001104
 80010e4:	08001104 	.word	0x08001104
 80010e8:	08001108 	.word	0x08001108

080010ec <_init>:
 80010ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ee:	bf00      	nop
 80010f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010f2:	bc08      	pop	{r3}
 80010f4:	469e      	mov	lr, r3
 80010f6:	4770      	bx	lr

080010f8 <_fini>:
 80010f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010fa:	bf00      	nop
 80010fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010fe:	bc08      	pop	{r3}
 8001100:	469e      	mov	lr, r3
 8001102:	4770      	bx	lr
