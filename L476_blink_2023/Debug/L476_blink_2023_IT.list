
L476_blink_2023_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000afc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c84  08000c84  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c84  08000c84  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000c84  08000c84  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c84  08000c84  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c84  08000c84  00010c84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c88  08000c88  00010c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000c8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000004  08000c90  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000c90  00020030  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002d42  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000098f  00000000  00000000  00022d76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000388  00000000  00000000  00023708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000320  00000000  00000000  00023a90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e79f  00000000  00000000  00023db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002cf8  00000000  00000000  0004254f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab845  00000000  00000000  00045247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f0a8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cb8  00000000  00000000  000f0adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c6c 	.word	0x08000c6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000c6c 	.word	0x08000c6c

080001c8 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80001cc:	4b06      	ldr	r3, [pc, #24]	; (80001e8 <LL_RCC_LSI_Enable+0x20>)
 80001ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80001d2:	4a05      	ldr	r2, [pc, #20]	; (80001e8 <LL_RCC_LSI_Enable+0x20>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80001dc:	bf00      	nop
 80001de:	46bd      	mov	sp, r7
 80001e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e4:	4770      	bx	lr
 80001e6:	bf00      	nop
 80001e8:	40021000 	.word	0x40021000

080001ec <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) ? 1UL : 0UL);
 80001f0:	4b07      	ldr	r3, [pc, #28]	; (8000210 <LL_RCC_LSI_IsReady+0x24>)
 80001f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80001f6:	f003 0302 	and.w	r3, r3, #2
 80001fa:	2b02      	cmp	r3, #2
 80001fc:	d101      	bne.n	8000202 <LL_RCC_LSI_IsReady+0x16>
 80001fe:	2301      	movs	r3, #1
 8000200:	e000      	b.n	8000204 <LL_RCC_LSI_IsReady+0x18>
 8000202:	2300      	movs	r3, #0
}
 8000204:	4618      	mov	r0, r3
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40021000 	.word	0x40021000

08000214 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000218:	4b05      	ldr	r3, [pc, #20]	; (8000230 <LL_RCC_MSI_Enable+0x1c>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a04      	ldr	r2, [pc, #16]	; (8000230 <LL_RCC_MSI_Enable+0x1c>)
 800021e:	f043 0301 	orr.w	r3, r3, #1
 8000222:	6013      	str	r3, [r2, #0]
}
 8000224:	bf00      	nop
 8000226:	46bd      	mov	sp, r7
 8000228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop
 8000230:	40021000 	.word	0x40021000

08000234 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <LL_RCC_MSI_IsReady+0x20>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	f003 0302 	and.w	r3, r3, #2
 8000240:	2b02      	cmp	r3, #2
 8000242:	d101      	bne.n	8000248 <LL_RCC_MSI_IsReady+0x14>
 8000244:	2301      	movs	r3, #1
 8000246:	e000      	b.n	800024a <LL_RCC_MSI_IsReady+0x16>
 8000248:	2300      	movs	r3, #0
}
 800024a:	4618      	mov	r0, r3
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40021000 	.word	0x40021000

08000258 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 8000262:	f043 0308 	orr.w	r3, r3, #8
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40021000 	.word	0x40021000

08000278 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000280:	4b06      	ldr	r3, [pc, #24]	; (800029c <LL_RCC_MSI_SetRange+0x24>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000288:	4904      	ldr	r1, [pc, #16]	; (800029c <LL_RCC_MSI_SetRange+0x24>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4313      	orrs	r3, r2
 800028e:	600b      	str	r3, [r1, #0]
}
 8000290:	bf00      	nop
 8000292:	370c      	adds	r7, #12
 8000294:	46bd      	mov	sp, r7
 8000296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029a:	4770      	bx	lr
 800029c:	40021000 	.word	0x40021000

080002a0 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80002a8:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	021b      	lsls	r3, r3, #8
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 80002b6:	4313      	orrs	r3, r2
 80002b8:	604b      	str	r3, [r1, #4]
}
 80002ba:	bf00      	nop
 80002bc:	370c      	adds	r7, #12
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_SetSysClkSource+0x24>)
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f023 0203 	bic.w	r2, r3, #3
 80002dc:	4904      	ldr	r1, [pc, #16]	; (80002f0 <LL_RCC_SetSysClkSource+0x24>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	608b      	str	r3, [r1, #8]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002f8:	4b04      	ldr	r3, [pc, #16]	; (800030c <LL_RCC_GetSysClkSource+0x18>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	f003 030c 	and.w	r3, r3, #12
}
 8000300:	4618      	mov	r0, r3
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <LL_RCC_SetAHBPrescaler+0x24>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000320:	4904      	ldr	r1, [pc, #16]	; (8000334 <LL_RCC_SetAHBPrescaler+0x24>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4313      	orrs	r3, r2
 8000326:	608b      	str	r3, [r1, #8]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000

08000338 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000348:	4904      	ldr	r1, [pc, #16]	; (800035c <LL_RCC_SetAPB1Prescaler+0x24>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4313      	orrs	r3, r2
 800034e:	608b      	str	r3, [r1, #8]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	40021000 	.word	0x40021000

08000360 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_RCC_SetAPB2Prescaler+0x24>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000370:	4904      	ldr	r1, [pc, #16]	; (8000384 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4313      	orrs	r3, r2
 8000376:	608b      	str	r3, [r1, #8]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000

08000388 <LL_RCC_SetRTCClockSource>:
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_LSI
  *         @arg @ref LL_RCC_RTC_CLKSOURCE_HSE_DIV32
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetRTCClockSource(uint32_t Source)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000390:	4b07      	ldr	r3, [pc, #28]	; (80003b0 <LL_RCC_SetRTCClockSource+0x28>)
 8000392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000396:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800039a:	4905      	ldr	r1, [pc, #20]	; (80003b0 <LL_RCC_SetRTCClockSource+0x28>)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4313      	orrs	r3, r2
 80003a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40021000 	.word	0x40021000

080003b4 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80003b4:	b480      	push	{r7}
 80003b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80003b8:	4b06      	ldr	r3, [pc, #24]	; (80003d4 <LL_RCC_EnableRTC+0x20>)
 80003ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003be:	4a05      	ldr	r2, [pc, #20]	; (80003d4 <LL_RCC_EnableRTC+0x20>)
 80003c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003c8:	bf00      	nop
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80003dc:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <LL_RCC_ForceBackupDomainReset+0x20>)
 80003de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80003e2:	4a05      	ldr	r2, [pc, #20]	; (80003f8 <LL_RCC_ForceBackupDomainReset+0x20>)
 80003e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80003e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
 80003f6:	bf00      	nop
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000406:	4a05      	ldr	r2, [pc, #20]	; (800041c <LL_RCC_ReleaseBackupDomainReset+0x20>)
 8000408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800040c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr
 800041a:	bf00      	nop
 800041c:	40021000 	.word	0x40021000

08000420 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <LL_RCC_PLL_Enable+0x1c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	4a04      	ldr	r2, [pc, #16]	; (800043c <LL_RCC_PLL_Enable+0x1c>)
 800042a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800042e:	6013      	str	r3, [r2, #0]
}
 8000430:	bf00      	nop
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000444:	4b07      	ldr	r3, [pc, #28]	; (8000464 <LL_RCC_PLL_IsReady+0x24>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800044c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000450:	d101      	bne.n	8000456 <LL_RCC_PLL_IsReady+0x16>
 8000452:	2301      	movs	r3, #1
 8000454:	e000      	b.n	8000458 <LL_RCC_PLL_IsReady+0x18>
 8000456:	2300      	movs	r3, #0
}
 8000458:	4618      	mov	r0, r3
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr
 8000462:	bf00      	nop
 8000464:	40021000 	.word	0x40021000

08000468 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000468:	b480      	push	{r7}
 800046a:	b085      	sub	sp, #20
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000476:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000478:	68da      	ldr	r2, [r3, #12]
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800047c:	4013      	ands	r3, r2
 800047e:	68f9      	ldr	r1, [r7, #12]
 8000480:	68ba      	ldr	r2, [r7, #8]
 8000482:	4311      	orrs	r1, r2
 8000484:	687a      	ldr	r2, [r7, #4]
 8000486:	0212      	lsls	r2, r2, #8
 8000488:	4311      	orrs	r1, r2
 800048a:	683a      	ldr	r2, [r7, #0]
 800048c:	430a      	orrs	r2, r1
 800048e:	4904      	ldr	r1, [pc, #16]	; (80004a0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000490:	4313      	orrs	r3, r2
 8000492:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000
 80004a4:	f9ff808c 	.word	0xf9ff808c

080004a8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80004ac:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004ae:	68db      	ldr	r3, [r3, #12]
 80004b0:	4a04      	ldr	r2, [pc, #16]	; (80004c4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80004b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004b6:	60d3      	str	r3, [r2, #12]
}
 80004b8:	bf00      	nop
 80004ba:	46bd      	mov	sp, r7
 80004bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop
 80004c4:	40021000 	.word	0x40021000

080004c8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80004d0:	4b06      	ldr	r3, [pc, #24]	; (80004ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80004d8:	4904      	ldr	r1, [pc, #16]	; (80004ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	4313      	orrs	r3, r2
 80004de:	600b      	str	r3, [r1, #0]
}
 80004e0:	bf00      	nop
 80004e2:	370c      	adds	r7, #12
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	40007000 	.word	0x40007000

080004f0 <LL_PWR_EnableBkUpAccess>:
  * @brief  Enable access to the backup domain
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <LL_PWR_EnableBkUpAccess+0x1c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <LL_PWR_EnableBkUpAccess+0x1c>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40007000 	.word	0x40007000

08000510 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <LL_FLASH_SetLatency+0x24>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f023 0207 	bic.w	r2, r3, #7
 8000520:	4904      	ldr	r1, [pc, #16]	; (8000534 <LL_FLASH_SetLatency+0x24>)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4313      	orrs	r3, r2
 8000526:	600b      	str	r3, [r1, #0]
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40022000 	.word	0x40022000

08000538 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <LL_FLASH_GetLatency+0x18>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f003 0307 	and.w	r3, r3, #7
}
 8000544:	4618      	mov	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40022000 	.word	0x40022000

08000554 <SystemClock_Config_exp1>:
  *            Flash Latency(WS)              = 4
  * @param  None
  * @retval None
  */
void SystemClock_Config_exp1(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000558:	2004      	movs	r0, #4
 800055a:	f7ff ffd9 	bl	8000510 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800055e:	bf00      	nop
 8000560:	f7ff ffea 	bl	8000538 <LL_FLASH_GetLatency>
 8000564:	4603      	mov	r3, r0
 8000566:	2b04      	cmp	r3, #4
 8000568:	d1fa      	bne.n	8000560 <SystemClock_Config_exp1+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800056a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800056e:	f7ff ffab 	bl	80004c8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 8000572:	f7ff fe29 	bl	80001c8 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 8000576:	bf00      	nop
 8000578:	f7ff fe38 	bl	80001ec <LL_RCC_LSI_IsReady>
 800057c:	4603      	mov	r3, r0
 800057e:	2b01      	cmp	r3, #1
 8000580:	d1fa      	bne.n	8000578 <SystemClock_Config_exp1+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 8000582:	f7ff fe47 	bl	8000214 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000586:	bf00      	nop
 8000588:	f7ff fe54 	bl	8000234 <LL_RCC_MSI_IsReady>
 800058c:	4603      	mov	r3, r0
 800058e:	2b01      	cmp	r3, #1
 8000590:	d1fa      	bne.n	8000588 <SystemClock_Config_exp1+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000592:	f7ff fe61 	bl	8000258 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000596:	2060      	movs	r0, #96	; 0x60
 8000598:	f7ff fe6e 	bl	8000278 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 800059c:	2000      	movs	r0, #0
 800059e:	f7ff fe7f 	bl	80002a0 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 80005a2:	f7ff ffa5 	bl	80004f0 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 80005a6:	f7ff ff17 	bl	80003d8 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 80005aa:	f7ff ff27 	bl	80003fc <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 80005ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005b2:	f7ff fee9 	bl	8000388 <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 80005b6:	f7ff fefd 	bl	80003b4 <LL_RCC_EnableRTC>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 40, LL_RCC_PLLR_DIV_2);
 80005ba:	2300      	movs	r3, #0
 80005bc:	2228      	movs	r2, #40	; 0x28
 80005be:	2100      	movs	r1, #0
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff ff51 	bl	8000468 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80005c6:	f7ff ff6f 	bl	80004a8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80005ca:	f7ff ff29 	bl	8000420 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80005ce:	bf00      	nop
 80005d0:	f7ff ff36 	bl	8000440 <LL_RCC_PLL_IsReady>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d1fa      	bne.n	80005d0 <SystemClock_Config_exp1+0x7c>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80005da:	2003      	movs	r0, #3
 80005dc:	f7ff fe76 	bl	80002cc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80005e0:	bf00      	nop
 80005e2:	f7ff fe87 	bl	80002f4 <LL_RCC_GetSysClkSource>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b0c      	cmp	r3, #12
 80005ea:	d1fa      	bne.n	80005e2 <SystemClock_Config_exp1+0x8e>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f7ff fe8f 	bl	8000310 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005f2:	2000      	movs	r0, #0
 80005f4:	f7ff fea0 	bl	8000338 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f7ff feb1 	bl	8000360 <LL_RCC_SetAPB2Prescaler>

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(80000000);
 80005fe:	4802      	ldr	r0, [pc, #8]	; (8000608 <SystemClock_Config_exp1+0xb4>)
 8000600:	f000 fb00 	bl	8000c04 <LL_SetSystemCoreClock>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	04c4b400 	.word	0x04c4b400

0800060c <SystemClock_Config_exp2>:
void SystemClock_Config_exp2(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8000610:	2004      	movs	r0, #4
 8000612:	f7ff ff7d 	bl	8000510 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8000616:	bf00      	nop
 8000618:	f7ff ff8e 	bl	8000538 <LL_FLASH_GetLatency>
 800061c:	4603      	mov	r3, r0
 800061e:	2b04      	cmp	r3, #4
 8000620:	d1fa      	bne.n	8000618 <SystemClock_Config_exp2+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000622:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000626:	f7ff ff4f 	bl	80004c8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_LSI_Enable();
 800062a:	f7ff fdcd 	bl	80001c8 <LL_RCC_LSI_Enable>

   /* Wait till LSI is ready */
  while(LL_RCC_LSI_IsReady() != 1)
 800062e:	bf00      	nop
 8000630:	f7ff fddc 	bl	80001ec <LL_RCC_LSI_IsReady>
 8000634:	4603      	mov	r3, r0
 8000636:	2b01      	cmp	r3, #1
 8000638:	d1fa      	bne.n	8000630 <SystemClock_Config_exp2+0x24>
  {

  }
  LL_RCC_MSI_Enable();
 800063a:	f7ff fdeb 	bl	8000214 <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 800063e:	bf00      	nop
 8000640:	f7ff fdf8 	bl	8000234 <LL_RCC_MSI_IsReady>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1fa      	bne.n	8000640 <SystemClock_Config_exp2+0x34>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 800064a:	f7ff fe05 	bl	8000258 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_9);
 800064e:	2090      	movs	r0, #144	; 0x90
 8000650:	f7ff fe12 	bl	8000278 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000654:	2000      	movs	r0, #0
 8000656:	f7ff fe23 	bl	80002a0 <LL_RCC_MSI_SetCalibTrimming>
  LL_PWR_EnableBkUpAccess();
 800065a:	f7ff ff49 	bl	80004f0 <LL_PWR_EnableBkUpAccess>
  LL_RCC_ForceBackupDomainReset();
 800065e:	f7ff febb 	bl	80003d8 <LL_RCC_ForceBackupDomainReset>
  LL_RCC_ReleaseBackupDomainReset();
 8000662:	f7ff fecb 	bl	80003fc <LL_RCC_ReleaseBackupDomainReset>
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
 8000666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066a:	f7ff fe8d 	bl	8000388 <LL_RCC_SetRTCClockSource>
  LL_RCC_EnableRTC();
 800066e:	f7ff fea1 	bl	80003b4 <LL_RCC_EnableRTC>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000672:	bf00      	nop
 8000674:	f7ff fe3e 	bl	80002f4 <LL_RCC_GetSysClkSource>
 8000678:	4603      	mov	r3, r0
 800067a:	2b0c      	cmp	r3, #12
 800067c:	d1fa      	bne.n	8000674 <SystemClock_Config_exp2+0x68>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800067e:	2000      	movs	r0, #0
 8000680:	f7ff fe46 	bl	8000310 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000684:	2000      	movs	r0, #0
 8000686:	f7ff fe57 	bl	8000338 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800068a:	2000      	movs	r0, #0
 800068c:	f7ff fe68 	bl	8000360 <LL_RCC_SetAPB2Prescaler>

  //update global variable SystemCoreClock --> give access to CPU clock frequency.
  LL_SetSystemCoreClock(80000000);
 8000690:	4802      	ldr	r0, [pc, #8]	; (800069c <SystemClock_Config_exp2+0x90>)
 8000692:	f000 fab7 	bl	8000c04 <LL_SetSystemCoreClock>
}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	04c4b400 	.word	0x04c4b400

080006a0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a8:	4b08      	ldr	r3, [pc, #32]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4313      	orrs	r3, r2
 80006b2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4013      	ands	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006be:	68fb      	ldr	r3, [r7, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	40021000 	.word	0x40021000

080006d0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b08b      	sub	sp, #44	; 0x2c
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	60f8      	str	r0, [r7, #12]
 80006d8:	60b9      	str	r1, [r7, #8]
 80006da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681a      	ldr	r2, [r3, #0]
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	fa93 f3a3 	rbit	r3, r3
 80006ea:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006ec:	693b      	ldr	r3, [r7, #16]
 80006ee:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006f0:	69bb      	ldr	r3, [r7, #24]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d101      	bne.n	80006fa <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 80006f6:	2320      	movs	r3, #32
 80006f8:	e003      	b.n	8000702 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 80006fa:	69bb      	ldr	r3, [r7, #24]
 80006fc:	fab3 f383 	clz	r3, r3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2103      	movs	r1, #3
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	401a      	ands	r2, r3
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000712:	6a3b      	ldr	r3, [r7, #32]
 8000714:	fa93 f3a3 	rbit	r3, r3
 8000718:	61fb      	str	r3, [r7, #28]
  return result;
 800071a:	69fb      	ldr	r3, [r7, #28]
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800071e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000724:	2320      	movs	r3, #32
 8000726:	e003      	b.n	8000730 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800072a:	fab3 f383 	clz	r3, r3
 800072e:	b2db      	uxtb	r3, r3
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	431a      	orrs	r2, r3
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	601a      	str	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	372c      	adds	r7, #44	; 0x2c
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr

0800074a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800074a:	b480      	push	{r7}
 800074c:	b085      	sub	sp, #20
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	685a      	ldr	r2, [r3, #4]
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	43db      	mvns	r3, r3
 800075e:	401a      	ands	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	fb01 f303 	mul.w	r3, r1, r3
 8000768:	431a      	orrs	r2, r3
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	605a      	str	r2, [r3, #4]
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800077a:	b480      	push	{r7}
 800077c:	b083      	sub	sp, #12
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
 8000782:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	691a      	ldr	r2, [r3, #16]
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4013      	ands	r3, r2
 800078c:	683a      	ldr	r2, [r7, #0]
 800078e:	429a      	cmp	r2, r3
 8000790:	d101      	bne.n	8000796 <LL_GPIO_IsInputPinSet+0x1c>
 8000792:	2301      	movs	r3, #1
 8000794:	e000      	b.n	8000798 <LL_GPIO_IsInputPinSet+0x1e>
 8000796:	2300      	movs	r3, #0
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	683a      	ldr	r2, [r7, #0]
 80007b2:	619a      	str	r2, [r3, #24]
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007da:	4770      	bx	lr

080007dc <GPIO_init>:
#define LED_PIN LL_GPIO_PIN_5
#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13

void GPIO_init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
 80007e0:	2001      	movs	r0, #1
 80007e2:	f7ff ff5d 	bl	80006a0 <LL_AHB2_GRP1_EnableClock>
// Green LED --> User LED
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 80007e6:	2201      	movs	r2, #1
 80007e8:	2120      	movs	r1, #32
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f7ff ff6f 	bl	80006d0 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f7ff ffa6 	bl	800074a <LL_GPIO_SetPinOutputType>
LL_GPIO_SetPinOutputType( GPIOB, LL_GPIO_PIN_11, LL_GPIO_OUTPUT_PUSHPULL );
LL_GPIO_SetPinPull( GPIOB, LL_GPIO_PIN_11, LL_GPIO_PULL_NO );
#endif

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
 80007fe:	2004      	movs	r0, #4
 8000800:	f7ff ff4e 	bl	80006a0 <LL_AHB2_GRP1_EnableClock>
// Blue button conected to pin PC13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 8000804:	2200      	movs	r2, #0
 8000806:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080a:	4808      	ldr	r0, [pc, #32]	; (800082c <GPIO_init+0x50>)
 800080c:	f7ff ff60 	bl	80006d0 <LL_GPIO_SetPinMode>

// pin PC10 for oscillator stability measurement
LL_GPIO_SetPinMode( GPIOC, LL_GPIO_PIN_10, LL_GPIO_MODE_OUTPUT );
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <GPIO_init+0x50>)
 8000818:	f7ff ff5a 	bl	80006d0 <LL_GPIO_SetPinMode>
LL_GPIO_SetPinOutputType( GPIOC, LL_GPIO_PIN_10, LL_GPIO_OUTPUT_PUSHPULL );
 800081c:	2200      	movs	r2, #0
 800081e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000822:	4802      	ldr	r0, [pc, #8]	; (800082c <GPIO_init+0x50>)
 8000824:	f7ff ff91 	bl	800074a <LL_GPIO_SetPinOutputType>

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	48000800 	.word	0x48000800

08000830 <LED_GREEN>:


void LED_GREEN( int val )
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	if	( val ) {
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d005      	beq.n	800084a <LED_GREEN+0x1a>
		LL_GPIO_SetOutputPin(   LED_PORT, LED_PIN );
 800083e:	2120      	movs	r1, #32
 8000840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000844:	f7ff ffae 	bl	80007a4 <LL_GPIO_SetOutputPin>
	}
	else {
		LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
	}
}
 8000848:	e004      	b.n	8000854 <LED_GREEN+0x24>
		LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
 800084a:	2120      	movs	r1, #32
 800084c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000850:	f7ff ffb6 	bl	80007c0 <LL_GPIO_ResetOutputPin>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <BLUE_BUTTON>:

int BLUE_BUTTON()
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
	return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 8000860:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000864:	4805      	ldr	r0, [pc, #20]	; (800087c <BLUE_BUTTON+0x20>)
 8000866:	f7ff ff88 	bl	800077a <LL_GPIO_IsInputPinSet>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	bf0c      	ite	eq
 8000870:	2301      	moveq	r3, #1
 8000872:	2300      	movne	r3, #0
 8000874:	b2db      	uxtb	r3, r3
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	48000800 	.word	0x48000800

08000880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800089c:	4013      	ands	r3, r2
 800089e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008a4:	68bb      	ldr	r3, [r7, #8]
 80008a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008b2:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <__NVIC_SetPriorityGrouping+0x44>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	60d3      	str	r3, [r2, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	e000ed00 	.word	0xe000ed00

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	db0a      	blt.n	80008f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <__NVIC_SetPriority+0x4c>)
 80008e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e6:	0112      	lsls	r2, r2, #4
 80008e8:	b2d2      	uxtb	r2, r2
 80008ea:	440b      	add	r3, r1
 80008ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008f0:	e00a      	b.n	8000908 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4908      	ldr	r1, [pc, #32]	; (8000918 <__NVIC_SetPriority+0x50>)
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	f003 030f 	and.w	r3, r3, #15
 80008fe:	3b04      	subs	r3, #4
 8000900:	0112      	lsls	r2, r2, #4
 8000902:	b2d2      	uxtb	r2, r2
 8000904:	440b      	add	r3, r1
 8000906:	761a      	strb	r2, [r3, #24]
}
 8000908:	bf00      	nop
 800090a:	370c      	adds	r7, #12
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	e000e100 	.word	0xe000e100
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	3b01      	subs	r3, #1
 8000928:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800092c:	d301      	bcc.n	8000932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800092e:	2301      	movs	r3, #1
 8000930:	e00f      	b.n	8000952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000932:	4a0a      	ldr	r2, [pc, #40]	; (800095c <SysTick_Config+0x40>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	3b01      	subs	r3, #1
 8000938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800093a:	210f      	movs	r1, #15
 800093c:	f04f 30ff 	mov.w	r0, #4294967295
 8000940:	f7ff ffc2 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <SysTick_Config+0x40>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800094a:	4b04      	ldr	r3, [pc, #16]	; (800095c <SysTick_Config+0x40>)
 800094c:	2207      	movs	r2, #7
 800094e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000950:	2300      	movs	r3, #0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	e000e010 	.word	0xe000e010

08000960 <LL_RCC_MSI_SetRange>:
{
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <LL_RCC_MSI_SetRange+0x24>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000970:	4904      	ldr	r1, [pc, #16]	; (8000984 <LL_RCC_MSI_SetRange+0x24>)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4313      	orrs	r3, r2
 8000976:	600b      	str	r3, [r1, #0]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	40021000 	.word	0x40021000

08000988 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000990:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000992:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000994:	4907      	ldr	r1, [pc, #28]	; (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4313      	orrs	r3, r2
 800099a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800099c:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800099e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4013      	ands	r3, r2
 80009a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009a6:	68fb      	ldr	r3, [r7, #12]
}
 80009a8:	bf00      	nop
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr
 80009b4:	40021000 	.word	0x40021000

080009b8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009c4:	4907      	ldr	r1, [pc, #28]	; (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4313      	orrs	r3, r2
 80009ca:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80009cc:	4b05      	ldr	r3, [pc, #20]	; (80009e4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80009ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4013      	ands	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80009d6:	68fb      	ldr	r3, [r7, #12]
}
 80009d8:	bf00      	nop
 80009da:	3714      	adds	r7, #20
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80009ec:	4b05      	ldr	r3, [pc, #20]	; (8000a04 <LL_LPM_EnableSleep+0x1c>)
 80009ee:	691b      	ldr	r3, [r3, #16]
 80009f0:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <LL_LPM_EnableSleep+0x1c>)
 80009f2:	f023 0304 	bic.w	r3, r3, #4
 80009f6:	6113      	str	r3, [r2, #16]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <main>:
volatile int LED_ON=0;
volatile int Old_State_Blue_Button=0;
volatile int Actual_State_Blue_Button=0;
volatile int Sleep_State=0;
volatile int exp=0;
int main(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
	/*clock domains activation*/
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f7ff ffd3 	bl	80009b8 <LL_APB2_GRP1_EnableClock>
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000a12:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000a16:	f7ff ffb7 	bl	8000988 <LL_APB1_GRP1_EnableClock>

	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a1a:	2003      	movs	r0, #3
 8000a1c:	f7ff ff30 	bl	8000880 <__NVIC_SetPriorityGrouping>

	/* Configure the system clock */
	if (exp=1)
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <main+0x64>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
	{SystemClock_Config_exp1();
 8000a26:	f7ff fd95 	bl	8000554 <SystemClock_Config_exp1>
	}
	if(exp=2){
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <main+0x64>)
 8000a2c:	2202      	movs	r2, #2
 8000a2e:	601a      	str	r2, [r3, #0]
		SystemClock_Config_exp2();
 8000a30:	f7ff fdec 	bl	800060c <SystemClock_Config_exp2>
	LL_RCC_MSI_SetRange(RCC_CR_MSIRANGE_9);
 8000a34:	2090      	movs	r0, #144	; 0x90
 8000a36:	f7ff ff93 	bl	8000960 <LL_RCC_MSI_SetRange>
	}
	/* Initialize all configured peripherals */
	//GPIO configuration
	GPIO_init();
 8000a3a:	f7ff fecf 	bl	80007dc <GPIO_init>

	//initialization of systick timer (tick period set at 1 ms)
	//LL_Init1msTick( SystemCoreClock );
	//set priority
	NVIC_SetPriority(SysTick_IRQn, -1);
 8000a3e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a42:	f04f 30ff 	mov.w	r0, #4294967295
 8000a46:	f7ff ff3f 	bl	80008c8 <__NVIC_SetPriority>
	//Set the Systick reload value for a 10ms overflow
	SysTick_Config(SystemCoreClock / 100); // 10ms overflow
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <main+0x68>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a09      	ldr	r2, [pc, #36]	; (8000a74 <main+0x6c>)
 8000a50:	fba2 2303 	umull	r2, r3, r2, r3
 8000a54:	095b      	lsrs	r3, r3, #5
 8000a56:	4618      	mov	r0, r3
 8000a58:	f7ff ff60 	bl	800091c <SysTick_Config>
	//Enable the simple sleep mode
	LL_LPM_EnableSleep();
 8000a5c:	f7ff ffc4 	bl	80009e8 <LL_LPM_EnableSleep>
	while (1) {
		if(Sleep_State==1)
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <main+0x70>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d1fb      	bne.n	8000a60 <main+0x58>
			__WFI();
 8000a68:	bf30      	wfi
		if(Sleep_State==1)
 8000a6a:	e7f9      	b.n	8000a60 <main+0x58>
 8000a6c:	2000002c 	.word	0x2000002c
 8000a70:	20000000 	.word	0x20000000
 8000a74:	51eb851f 	.word	0x51eb851f
 8000a78:	20000028 	.word	0x20000028

08000a7c <SysTick_Handler>:

	}
}

// systick interrupt handler
void SysTick_Handler(void) {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	millis+=10;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	330a      	adds	r3, #10
 8000a86:	4a18      	ldr	r2, [pc, #96]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000a88:	6013      	str	r3, [r2, #0]
	if(BLUE_BUTTON())
 8000a8a:	f7ff fee7 	bl	800085c <BLUE_BUTTON>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <SysTick_Handler+0x1e>
		Sleep_State=1;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <SysTick_Handler+0x70>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	601a      	str	r2, [r3, #0]
	//to be defined if systick interrupt is enabled.
	if (LED_ON==1 && millis>=T_LED_ON)
 8000a9a:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <SysTick_Handler+0x74>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d10d      	bne.n	8000abe <SysTick_Handler+0x42>
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b31      	cmp	r3, #49	; 0x31
 8000aa8:	d909      	bls.n	8000abe <SysTick_Handler+0x42>
	{
	LED_GREEN(0);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f7ff fec0 	bl	8000830 <LED_GREEN>
	LED_ON=0;
 8000ab0:	4b0f      	ldr	r3, [pc, #60]	; (8000af0 <SysTick_Handler+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	millis=0;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
	{
	LED_GREEN(1);
	LED_ON=1;
	millis=0;
	}
}
 8000abc:	e012      	b.n	8000ae4 <SysTick_Handler+0x68>
	else if(LED_ON ==0 && millis>=T_LED_OFF)
 8000abe:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <SysTick_Handler+0x74>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d10e      	bne.n	8000ae4 <SysTick_Handler+0x68>
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f240 32b5 	movw	r2, #949	; 0x3b5
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d908      	bls.n	8000ae4 <SysTick_Handler+0x68>
	LED_GREEN(1);
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	f7ff feac 	bl	8000830 <LED_GREEN>
	LED_ON=1;
 8000ad8:	4b05      	ldr	r3, [pc, #20]	; (8000af0 <SysTick_Handler+0x74>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
	millis=0;
 8000ade:	4b02      	ldr	r3, [pc, #8]	; (8000ae8 <SysTick_Handler+0x6c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000020 	.word	0x20000020
 8000aec:	20000028 	.word	0x20000028
 8000af0:	20000024 	.word	0x20000024

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr

08000b44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b48:	4b17      	ldr	r3, [pc, #92]	; (8000ba8 <SystemInit+0x64>)
 8000b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <SystemInit+0x64>)
 8000b50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <SystemInit+0x68>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <SystemInit+0x68>)
 8000b5e:	f043 0301 	orr.w	r3, r3, #1
 8000b62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <SystemInit+0x68>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b6a:	4b10      	ldr	r3, [pc, #64]	; (8000bac <SystemInit+0x68>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a0f      	ldr	r2, [pc, #60]	; (8000bac <SystemInit+0x68>)
 8000b70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <SystemInit+0x68>)
 8000b7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <SystemInit+0x68>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <SystemInit+0x68>)
 8000b88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <SystemInit+0x68>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b94:	4b04      	ldr	r3, [pc, #16]	; (8000ba8 <SystemInit+0x64>)
 8000b96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b9a:	609a      	str	r2, [r3, #8]
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ffc6 	bl	8000b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bba:	e003      	b.n	8000bc4 <LoopCopyDataInit>

08000bbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000bbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bc2:	3104      	adds	r1, #4

08000bc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bc4:	480a      	ldr	r0, [pc, #40]	; (8000bf0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000bc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000bcc:	d3f6      	bcc.n	8000bbc <CopyDataInit>
	ldr	r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000bd0:	e002      	b.n	8000bd8 <LoopFillZerobss>

08000bd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000bd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000bd4:	f842 3b04 	str.w	r3, [r2], #4

08000bd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <LoopForever+0x16>)
	cmp	r2, r3
 8000bda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000bdc:	d3f9      	bcc.n	8000bd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f000 f821 	bl	8000c24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff ff11 	bl	8000a08 <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000bec:	08000c8c 	.word	0x08000c8c
	ldr	r0, =_sdata
 8000bf0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bf4:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000bf8:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000bfc:	20000030 	.word	0x20000030

08000c00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_2_IRQHandler>
	...

08000c04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <LL_SetSystemCoreClock+0x1c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000000 	.word	0x20000000

08000c24 <__libc_init_array>:
 8000c24:	b570      	push	{r4, r5, r6, lr}
 8000c26:	4d0d      	ldr	r5, [pc, #52]	; (8000c5c <__libc_init_array+0x38>)
 8000c28:	4c0d      	ldr	r4, [pc, #52]	; (8000c60 <__libc_init_array+0x3c>)
 8000c2a:	1b64      	subs	r4, r4, r5
 8000c2c:	10a4      	asrs	r4, r4, #2
 8000c2e:	2600      	movs	r6, #0
 8000c30:	42a6      	cmp	r6, r4
 8000c32:	d109      	bne.n	8000c48 <__libc_init_array+0x24>
 8000c34:	4d0b      	ldr	r5, [pc, #44]	; (8000c64 <__libc_init_array+0x40>)
 8000c36:	4c0c      	ldr	r4, [pc, #48]	; (8000c68 <__libc_init_array+0x44>)
 8000c38:	f000 f818 	bl	8000c6c <_init>
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	10a4      	asrs	r4, r4, #2
 8000c40:	2600      	movs	r6, #0
 8000c42:	42a6      	cmp	r6, r4
 8000c44:	d105      	bne.n	8000c52 <__libc_init_array+0x2e>
 8000c46:	bd70      	pop	{r4, r5, r6, pc}
 8000c48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c4c:	4798      	blx	r3
 8000c4e:	3601      	adds	r6, #1
 8000c50:	e7ee      	b.n	8000c30 <__libc_init_array+0xc>
 8000c52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c56:	4798      	blx	r3
 8000c58:	3601      	adds	r6, #1
 8000c5a:	e7f2      	b.n	8000c42 <__libc_init_array+0x1e>
 8000c5c:	08000c84 	.word	0x08000c84
 8000c60:	08000c84 	.word	0x08000c84
 8000c64:	08000c84 	.word	0x08000c84
 8000c68:	08000c88 	.word	0x08000c88

08000c6c <_init>:
 8000c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c6e:	bf00      	nop
 8000c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c72:	bc08      	pop	{r3}
 8000c74:	469e      	mov	lr, r3
 8000c76:	4770      	bx	lr

08000c78 <_fini>:
 8000c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c7a:	bf00      	nop
 8000c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c7e:	bc08      	pop	{r3}
 8000c80:	469e      	mov	lr, r3
 8000c82:	4770      	bx	lr
